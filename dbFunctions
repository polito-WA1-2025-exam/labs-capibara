"use strict";

import sqlite3 from "sqlite3";
import * as poke from "./poke.mjs"


/**
 * Establishes a connection to the SQLite database.
 * Logs a message upon successful connection.
 */
const db = new sqlite3.Database("poke.sqlite", (err) => {
    if (err) 
        throw err;
    console.log("Connected to the poke database.");
    }
);


/// Ingredients and Proteins

/**
 * Retrieves all ingredients from the database that are not proteins.
 * @returns {Promise<string[]>} A promise that resolves to an array of ingredient names.
 */
export function getIngredients(){
    return new Promise( (resolve, reject) => {
        const sql = `SELECT * FROM ingredient
                     WHERE Protein = 0`;
        db.all(sql, [], (err, rows) => {
            if(err)
                reject(err);
            else{
                let result = [];
                rows.forEach( (item) => {
                    result.push(item.Name);
                });
                resolve(result);
            }
        });
    });
}

/**
 * Retrieves all proteins from the database.
 * @returns {Promise<string[]>} A promise that resolves to an array of protein names.
 */
export function getProteins(){
    return new Promise( (resolve, reject) => {
        const sql = `SELECT * FROM ingredient
                     WHERE Protein = 1`;
        db.all(sql, [], (err, rows) => {
            if(err)
                reject(err);
            else{
                let result = [];
                rows.forEach( (item) => {
                    result.push(item.Name);
                });
                resolve(result);
            }
        });
    });
}


/// Orders

/**
 * Inserts a new order into the database.
 * @param {Object} order - The order object to insert.
 * @param {number} order.user - The username of the user placing the order.
 * @param {number[]} order.bowls - An array of bowls included in the order.
 * @param {number} order.price - The total price of the order.
 * @returns {Promise<number>} A promise that resolves to the ID of the inserted order.
 */
export function insertOrder(order, price) {
    return new Promise((resolve, reject) => {
        const insertOrderSql = `INSERT INTO [order] (price, user) VALUES (?, ?)`;
        db.run(insertOrderSql, [price, order.user], function (err) {
            if (err) {
                reject(err);
            } else {
                // Retrieve the order number (order id) using this.lastID
                const Order_Id = this.lastID;

                // get all the Bowls ID from the order object 
                // and insert them into the ORDER_ELEMENT table
                const tasks = order.bowls.map((orderEl) => {
                    return new Promise((resolve, reject) => {
                        const getBowlIdSql = `SELECT Bowl_Id FROM BOWL WHERE Description = ?`;
                        db.get(getBowlIdSql, [JSON.stringify(orderEl.bowl)], (err, row) => {
                            if (err) {
                                reject(err);
                            } else if (row) {
                                const insertOrderElementSql = `INSERT INTO ORDER_ELEMENT (Order_Id, Bowl_Id, Quantity) VALUES (?, ?, ?)`;
                                db.run(insertOrderElementSql, [Order_Id, row.Bowl_ID, orderEl.quantity], (err) => {
                                    if (err) reject(err);
                                    else resolve();
                                });
                            } else {
                                reject(new Error("Bowl not found for description: " + description));
                            }
                        });
                    });
                });

            Promise.all(tasks)
                .then(() => resolve(Order_Id))
                .catch((err) => reject(err));
            }
        })
    });
}

/**
 * Retrieves all orders from the database.
 * @returns {Promise<Object[]>} A promise that resolves to an array of order objects.
 */
export function getOrders() {
    return new Promise((resolve, reject) => {
        const sql = `SELECT * FROM [order]`;
        db.all(sql, [], (err, rows) => {
            if (err) {
                reject(err);
            } else {
                resolve(rows);
            }
        });
    });
}

/**
 * Retrieves a specific order by its ID.
 * @param {number} orderId - The ID of the order to retrieve.
 * @returns {Promise<Object[]>} A promise that resolves to an array containing the order object.
 */
export function getOrderById(orderId){
    return new Promise( (resolve, reject) => {
        const sql = `SELECT * FROM [order] WHERE Order_Id = ?`;
        db.all(sql, [orderId], (err, rows) => {
            if(err)
                reject(err);
            else{
                let result = [];
                rows.forEach( (item) => {
                    result.push(item);
                });
                resolve(result);
            }
        });
    });
}

/// Bowl

/**
 * Retrieves all bowls with their ingredients from the database.
 * @returns {Promise<Object[]>} A promise that resolves to an array of bowl descriptions parsed as objects.
 */
export function getBowls(){
    return new Promise( (resolve, reject) => {
        const sql = `SELECT Description FROM BOWL`;
        db.all(sql, [], (err, rows) => {
            if(err)
                reject(err);
            else{
                let result = [];
                for(const item of rows){
                    result.push(JSON.parse(item.Description))
                }
                resolve(result);
            }
        });
    });
}

/**
 * Retrieves a specific bowl by its ID.
 * @param {number} bowlId - The ID of the bowl to retrieve.
 * @returns {Promise<Object[]>} A promise that resolves to an array containing the bowl description parsed as an object.
 */
export function getBowlById(bowlId){
    return new Promise( (resolve, reject) => {
        const sql = `SELECT Description FROM BOWL WHERE Bowl_Id = ?`;
        db.all(sql, [bowlId], (err, rows) => {
            if(err)
                reject(err);
            else{
                let result = [];
                for(const item of rows){
                    result.push(JSON.parse(item.Description))
                }
                resolve(result);
            }
        });
    });
}

/**
 * Retrieves a list of bowls with a certain size size.
 * @param {string} size - The desired bowl size.
 * @returns {Promise<Object[]>} A promise that resolves to an array containing the bowl description parsed as an object.
 */
export function getBowlsBySize(size){
    return new Promise( (resolve, reject) => {
        if (! poke.validSizes.some((validSize) => validSize === size))
            reject('invalid size');
        else{
            const sql = `SELECT Description FROM BOWL WHERE Size = ?`;
            db.all(sql, [size], (err, rows) => {
                if(err)
                    reject(err);
                else{
                    let result = [];
                    for(const item of rows){
                        result.push(JSON.parse(item.Description))
                    }
                    resolve(result);
                }
            });
        }
    });
}

/**
 * Inserts a new bowl into the database if it doesn't already exist.
 * @param {Object} bowl - The bowl object to insert.
 * @param {string} bowl.size - The size of the bowl.
 * @param {string} bowl.base - The base of the bowl.
 * @param {number} bowl.price - The price of the bowl.
 * @param {Object[]} bowl.ingredients - An array of ingredient names in the bowl.
 * @param {Object[]} bowl.proteins - An array of protein names in the bowl.
 * @returns {Promise<number>} A promise that resolves to the ID of the inserted or existing bowl.
 */
export function insertBowl(bowl) {
    return new Promise((resolve, reject) => {
        let proteins = {};
        let ingredients = {};
        let description = "";

        bowl.ingredients.forEach((p) => {
            if (p in ingredients) {
                ingredients[p] += 1;
            } else {
                ingredients[p] = 1;
            }
        });

        bowl.proteins.forEach((p) => {
            if (p in proteins) {
                proteins[p] += 1;
            } else {
                proteins[p] = 1;
            }
        });

        //description = bowl.size + "-" + bowl.base + "-" + JSON.stringify(ingredients) + "-" + JSON.stringify(proteins);
        description = JSON.stringify(bowl);

        // Check if the bowl already exists
        const checkSql = `SELECT Bowl_ID FROM BOWL WHERE Description = ?`;
        db.get(checkSql, [description], (err, row) => {
            if (err) {
                reject(err);
            } else if (row) {
                // Bowl already exists
                resolve(row.Bowl_ID);
            } else {
                // Insert the new bowl
                const insertBowlSql = `INSERT INTO BOWL (Size, Base, Price, Description) VALUES (?, ?, ?, ?)`;
                db.run(insertBowlSql, [bowl.size, bowl.base, bowl.price, description], function (err) {
                    if (err) {
                        reject(err);
                    } else {
                        const bowlId = this.lastID;

                        // Insert ingredients and proteins into HAS_INGREDIENTS
                        const insertIngredientSql = `INSERT INTO HAS_INGREDIENTS (Bowl_ID, Ingredient, Quantity) VALUES (?, ?, ?)`;

                        const tasks = [];

                        for (const [ingredient, quantity] of Object.entries(ingredients)) {
                            tasks.push(
                                new Promise((resolve, reject) => {
                                    db.run(insertIngredientSql, [bowlId, ingredient, quantity], (err) => {
                                        if (err) reject(err);
                                        else resolve();
                                    });
                                })
                            );
                        }

                        for (const [protein, quantity] of Object.entries(proteins)) {
                            tasks.push(
                                new Promise((resolve, reject) => {
                                    db.run(insertIngredientSql, [bowlId, protein, quantity], (err) => {
                                        if (err) reject(err);
                                        else resolve();
                                    });
                                })
                            );
                        }

                        Promise.all(tasks)
                            .then(() => resolve(bowlId))
                            .catch((err) => reject(err));
                    }
                });
            }
        });
    });
}

// TODO!
/**
 * Updates a new bowl of the database, by providing the attributes.
 * @param {Object} bowl - The bowl object to update.
 * @param {string} bowl.size - The size of the bowl.
 * @param {string} bowl.base - The base of the bowl.
 * @param {number} bowl.price - The price of the bowl.
 * @param {Object[]} bowl.ingredients - An array of ingredient names in the bowl.
 * @param {Object[]} bowl.proteins - An array of protein names in the bowl.
 * @returns {Promise<number>} A promise that resolves to the ID of the inserted or existing bowl.
 */
export function updateBowl(bowl) {
    return new Promise((resolve, reject) => {
        //let proteins = {};
        //let ingredients = {};
        //let description = "";

        /*bowl.ingredients.forEach((p) => {
            if (p in ingredients) {
                ingredients[p] += 1;
            } else {
                ingredients[p] = 1;
            }
        });*/

        /*bowl.proteins.forEach((p) => {
            if (p in proteins) {
                proteins[p] += 1;
            } else {
                proteins[p] = 1;
            }
        });*/

        //description = bowl.size + "-" + bowl.base + "-" + JSON.stringify(ingredients) + "-" + JSON.stringify(proteins);
        description = JSON.stringify(bowl);

        // Update a bowl
        const checkSql = `UPDATE size, base, FROM BOWL WHERE Description = ?`;
        db.get(checkSql, [description], (err, row) => {
            if (err) {
                reject(err);
            } else if (row) {
                // Bowl already exists
                resolve(row.Bowl_ID);
            } else {
                // Insert the new bowl
                const insertBowlSql = `INSERT INTO BOWL (Size, Base, Price, Description) VALUES (?, ?, ?, ?)`;
                db.run(insertBowlSql, [bowl.size, bowl.base, bowl.price, description], function (err) {
                    if (err) {
                        reject(err);
                    } else {
                        const bowlId = this.lastID;

                        // Insert ingredients and proteins into HAS_INGREDIENTS
                        const insertIngredientSql = `INSERT INTO HAS_INGREDIENTS (Bowl_ID, Ingredient, Quantity) VALUES (?, ?, ?)`;

                        const tasks = [];

                        for (const [ingredient, quantity] of Object.entries(ingredients)) {
                            tasks.push(
                                new Promise((resolve, reject) => {
                                    db.run(insertIngredientSql, [bowlId, ingredient, quantity], (err) => {
                                        if (err) reject(err);
                                        else resolve();
                                    });
                                })
                            );
                        }

                        for (const [protein, quantity] of Object.entries(proteins)) {
                            tasks.push(
                                new Promise((resolve, reject) => {
                                    db.run(insertIngredientSql, [bowlId, protein, quantity], (err) => {
                                        if (err) reject(err);
                                        else resolve();
                                    });
                                })
                            );
                        }

                        Promise.all(tasks)
                            .then(() => resolve(bowlId))
                            .catch((err) => reject(err));
                    }
                });
            }
        });
    });
}

/// User

/**
 * Add user to database
 * @param {Object} user - the user to be added into database 
 */
export function registerUser(user){
    return new Promise((resolve, reject) => {
        const sql = `INSERT INTO USER(Username, Password) VALUES(?, ?)`
        db.run(sql, [user.username, user.password], (err) => {
            if(err) reject(err);
            else    resolve();
        });
    });
}

/**
 * Retrieves all users from the database.
 * @returns {Promise<Object[]>} A promise that resolves to an array of user objects.
 */
export function getUsers() {
    return new Promise((resolve, reject) => {
        const sql = `SELECT * FROM USER`;
        db.all(sql, [], (err, rows) => {
            if (err) {
                reject(err);
            } else {
                resolve(rows);
            }
        });
    });
}

/**
 * Retrieves a specific user by their username.
 * @param {string} username - The username of the user to retrieve.
 * @returns {Promise<Object>} A promise that resolves to the user object.
 */
export function getUserByUsername(username) {
    return new Promise((resolve, reject) => {
        const sql = `SELECT * FROM USER WHERE Username = ?`;
        db.get(sql, [username], (err, row) => {
            if (err) {
                reject(err);
            } else {
                resolve(row);
            }
        });
    });
}

export async function userIsPresent(username) {
    try {
        const user = await getUserByUsername(username);
        return !!user;
    } catch {
        return false;
    }
}

/**
 * Delete an order given its ID
 * @param {int} id - The id of the order to be deleted
 * @returns ()
 */
export function deleteOrderById(id) {
    return new Promise((resolve, reject) => {
        const sql = `DELETE FROM \"ORDER\" WHERE Order_Id = ?`;
        db.get(sql, [id], (err, row) => {
            if (err) {
                reject(err);
            } else {
                resolve(row);
            }
        });
    });
}


