"use strict";

import sqlite3 from "sqlite3";


// open database connection
const db = new sqlite3.Database("poke.sqlite", (err) => {
    if (err) 
        throw err;
    console.log("Connected to the poke database.");
    }
);

// get ingredients from database
export function getIngredients(){
    return new Promise( (resolve, reject) => {
        const sql = `SELECT * FROM ingredient
                     WHERE Protein = 0`;
        db.all(sql, [], (err, rows) => {
            if(err)
                reject(err);
            else{
                let result = [];
                rows.forEach( (item) => {
                    result.push(item.Name);
                });
                resolve(result);
            }
        });
    });
}

// get proteins from database
export function getProteins(){
    return new Promise( (resolve, reject) => {
        const sql = `SELECT * FROM ingredient
                     WHERE Protein = 1`;
        db.all(sql, [], (err, rows) => {
            if(err)
                reject(err);
            else{
                let result = [];
                rows.forEach( (item) => {
                    result.push(item.Name);
                });
                resolve(result);
            }
        });
    });
}

// get all bowls with their ingredients from database
export function getBowls(){
    return new Promise( (resolve, reject) => {
        const sql = `SELECT * FROM BOWL B, HAS_INGREDIENTS H, INGREDIENT I
                     WHERE B.Bowl_ID = H.Bowl_ID AND H.Ingredient = I.Name
                     ORDER BY B.Bowl_ID, I.Name`;
        db.all(sql, [], (err, rows) => {
            if(err)
                reject(err);
            else{
                let result = {};
                for(const item of rows){
                    // check if the ingredient is already into result
                    if(result[item.Bowl_ID] === undefined){
                        result[item.Bowl_ID] = {
                            price : item.Price,
                            size : item.Size,
                            ingredients : [],
                            proteins : []
                        };
                    }
                    // add the ingredient to the result vector
                    if(item.Protein === 0){
                        result[item.Bowl_ID].ingredients.push(item.Name);
                    } else{
                        result[item.Bowl_ID].proteins.push(item.Name);
                    }
                }

                resolve(result);
            }
        });
    });
}

